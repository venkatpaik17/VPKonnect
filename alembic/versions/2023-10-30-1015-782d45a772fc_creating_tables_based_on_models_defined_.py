"""Creating tables based on models defined in app/models

Revision ID: 782d45a772fc
Revises: 
Create Date: 2023-10-30 10:15:42.683478

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "782d45a772fc"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "activity_detail",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("metric", sa.String(length=20), nullable=False),
        sa.Column(
            "count", sa.BigInteger(), server_default=sa.text("0"), nullable=False
        ),
        sa.Column("date", sa.Date(), server_default=sa.func.now(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "metric", "date", name="activity_detail_metric_date_unique"
        ),
    )
    op.create_table(
        "user",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("first_name", sa.String(length=50), nullable=False),
        sa.Column("last_name", sa.String(length=50), nullable=False),
        sa.Column("username", sa.String(length=30), nullable=False),
        sa.Column("password", sa.String(length=65), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("date_of_birth", sa.Date(), nullable=False),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column("profile_picture", sa.String(), nullable=True),
        sa.Column("gender", sa.String(length=1), nullable=False),
        sa.Column("bio", sa.String(length=150), nullable=True),
        sa.Column("country", sa.String(length=3), nullable=True),
        sa.Column(
            "account_visibility",
            sa.String(length=20),
            server_default=sa.text("'public'"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            server_default=sa.text("'active'"),
            nullable=False,
        ),
        sa.Column(
            "type",
            sa.String(length=20),
            server_default=sa.text("'standard'"),
            nullable=False,
        ),
        sa.Column("is_deleted", sa.Boolean(), server_default="False", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            onupdate=sa.func.now(),
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "password_change_history",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "post",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("image", sa.LargeBinary(length=20971520), nullable=False),
        sa.Column("caption", sa.String(length=2200), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="False", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            onupdate=sa.func.now(),
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_auth_track",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("refresh_token_id", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.String(length=20),
            server_default=sa.text("'active'"),
            nullable=False,
        ),
        sa.Column("device_info", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            onupdate=sa.func.now(),
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("refresh_token_id"),
    )
    op.create_table(
        "user_follow_association",
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column("follower_user_id", UUID(as_uuid=True), nullable=False),
        sa.Column("followed_user_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["followed_user_id"], ["user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["follower_user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("follower_user_id", "followed_user_id"),
    )
    op.create_table(
        "user_password_reset_token",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("reset_token_id", sa.String(), nullable=False),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="False", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("reset_token_id", "user_id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "user_session",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("device_info", sa.String(), nullable=False),
        sa.Column(
            "login_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column(
            "logout_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            onupdate=sa.func.now(),
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("True"), nullable=False
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "username_change_history",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("previous_username", sa.String(length=30), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "comment",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("content", sa.String(length=2200), nullable=False),
        sa.Column(
            "status",
            sa.String(length=20),
            server_default=sa.text("'published'"),
            nullable=False,
        ),
        sa.Column("is_deleted", sa.Boolean(), server_default="False", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            onupdate=sa.func.now(),
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.Column("post_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["post_id"], ["post.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "post_activity",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column(
            "total_likes", sa.BigInteger(), server_default=sa.text("0"), nullable=False
        ),
        sa.Column(
            "total_comments",
            sa.BigInteger(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column("post_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["post_id"], ["post.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "post_like",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("is_deleted", sa.Boolean(), server_default="False", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.Column("post_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["post_id"], ["post.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "post_id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "comment_activity",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column(
            "total_likes", sa.BigInteger(), server_default=sa.text("0"), nullable=False
        ),
        sa.Column("comment_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["comment_id"], ["comment.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "comment_like",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            server_default=sa.func.generate_ulid(),
            nullable=False,
        ),
        sa.Column("is_deleted", sa.Boolean(), server_default="False", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=False,
        ),
        sa.Column("user_id", UUID(as_uuid=True), nullable=False),
        sa.Column("comment_id", UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["comment_id"], ["comment.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "comment_id"),
        sa.UniqueConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("comment_like")
    op.drop_table("comment_activity")
    op.drop_table("post_like")
    op.drop_table("post_activity")
    op.drop_table("comment")
    op.drop_table("username_change_history")
    op.drop_table("user_session")
    op.drop_table("user_password_reset_token")
    op.drop_table("user_follow_association")
    op.drop_table("user_auth_track")
    op.drop_table("post")
    op.drop_table("password_change_history")
    op.drop_table("user")
    op.drop_table("activity_detail")
    # ### end Alembic commands ###
